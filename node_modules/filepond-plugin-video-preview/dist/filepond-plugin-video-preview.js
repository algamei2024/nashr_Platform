/*!
 * FilePondPluginVideoPreview 1.0.2
 * Licensed under MIT, https://opensource.org/licenses/MIT/
 * Please visit undefined for details.
 */

/* eslint-disable */

(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined'
    ? (module.exports = factory())
    : typeof define === 'function' && define.amd
    ? define(factory)
    : ((global = global || self),
      (global.FilePondPluginVideoPreview = factory()));
})(this, function() {
  'use strict';

  var createVideoView = function createVideoView(_) {
    return _.utils.createView({
      name: 'video-preview',
      tag: 'div',
      ignoreRect: true,
      create: function create(_ref) {
        var root = _ref.root;
        root.ref.video = document.createElement('video');
        root.ref.video.setAttribute('controls', true);
        root.element.appendChild(root.ref.video);
      },
      write: _.utils.createRoute({
        DID_VIDEO_PREVIEW_LOAD: function DID_VIDEO_PREVIEW_LOAD(_ref2) {
          var root = _ref2.root,
            props = _ref2.props;
          var id = props.id;

          // get item
          var item = root.query('GET_ITEM', { id: props.id });
          if (!item) return;

          var URL = window.URL || window.webkitURL;
          var blob = new Blob([item.file], { type: item.file.type });

          root.ref.video.type = item.file.type;
          root.ref.video.src = URL.createObjectURL(blob);
        }
      })
    });
  };

  var createVideoWrapperView = function createVideoWrapperView(_) {
    /**
     * Write handler for when preview container has been created
     */
    var didCreatePreviewContainer = function didCreatePreviewContainer(_ref) {
      var root = _ref.root,
        props = _ref.props;
      var id = props.id;
      var item = root.query('GET_ITEM', id);
      if (!item) return;

      // the preview is now ready to be drawn
      root.dispatch('DID_VIDEO_PREVIEW_LOAD', {
        id: id
      });
    };

    /**
     * Constructor
     */
    var create = function create(_ref2) {
      var root = _ref2.root,
        props = _ref2.props;
      var video = createVideoView(_);

      // append video presenter
      root.ref.video = root.appendChildView(
        root.createChildView(video, {
          id: props.id
        })
      );
    };

    return _.utils.createView({
      name: 'video-preview-wrapper',
      create: create,
      write: _.utils.createRoute({
        // video preview stated
        DID_VIDEO_PREVIEW_CONTAINER_CREATE: didCreatePreviewContainer
      })
    });
  };

  var isPreviewableVideo = function isPreviewableVideo(file) {
    return /^video/.test(file.type);
  };

  /**
   * Video Preview Plugin
   */
  var plugin = function plugin(fpAPI) {
    var addFilter = fpAPI.addFilter,
      utils = fpAPI.utils;
    var Type = utils.Type,
      createRoute = utils.createRoute;
    var videoWrapperView = createVideoWrapperView(fpAPI);

    // called for each view that is created right after the 'create' method
    addFilter('CREATE_VIEW', function(viewAPI) {
      // get reference to created view
      var is = viewAPI.is,
        view = viewAPI.view,
        query = viewAPI.query;

      // only hook up to item view
      if (!is('file')) {
        return;
      }

      // create the video preview plugin, but only do so if the item is an video
      var didLoadItem = function didLoadItem(_ref) {
        var root = _ref.root,
          props = _ref.props;
        var id = props.id;
        var item = query('GET_ITEM', id);

        if (!item || item.archived || !isPreviewableVideo(item.file)) {
          return;
        }

        // set preview view
        root.ref.videoPreview = view.appendChildView(
          view.createChildView(videoWrapperView, { id: id })
        );

        // now ready
        root.dispatch('DID_VIDEO_PREVIEW_CONTAINER_CREATE', { id: id });
      };

      // start writing
      view.registerWriter(
        createRoute(
          {
            DID_LOAD_ITEM: didLoadItem
          },
          function(_ref2) {
            var root = _ref2.root,
              props = _ref2.props;
            var id = props.id;
            var item = query('GET_ITEM', id);

            // don't do anything while not a video or hidden
            if (!isPreviewableVideo(item.file) || root.rect.element.hidden)
              return;

            // should we redraw
            if (root.ref.shouldUpdatePanelHeight != false) {
              // time to resize the parent panel
              root.dispatch('DID_UPDATE_PANEL_HEIGHT', {
                id: props.id,
                height: 200
              });

              root.ref.shouldUpdatePanelHeight = false;
            }
          }
        )
      );
    });

    // expose plugin
    return {
      options: {
        // Enable or disable video preview
        allowVideoPreview: [true, Type.BOOLEAN]
      }
    };
  };

  // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags
  var isBrowser =
    typeof window !== 'undefined' && typeof window.document !== 'undefined';
  if (isBrowser) {
    document.dispatchEvent(
      new CustomEvent('FilePond:pluginloaded', { detail: plugin })
    );
  }

  return plugin;
});
