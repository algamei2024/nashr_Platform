/*!
 * FilePondPluginVideoPreview 1.0.2
 * Licensed under MIT, https://opensource.org/licenses/MIT/
 * Please visit undefined for details.
 */

/* eslint-disable */

const createVideoView = _ =>
  _.utils.createView({
    name: 'video-preview',
    tag: 'div',
    ignoreRect: true,
    create: ({ root }) => {
      root.ref.video = document.createElement('video');
      root.ref.video.setAttribute('controls', true);
      root.element.appendChild(root.ref.video);
    },
    write: _.utils.createRoute({
      DID_VIDEO_PREVIEW_LOAD: ({ root, props }) => {
        const { id } = props;

        // get item
        const item = root.query('GET_ITEM', { id: props.id });
        if (!item) return;

        let URL = window.URL || window.webkitURL;
        let blob = new Blob([item.file], { type: item.file.type });

        root.ref.video.type = item.file.type;
        root.ref.video.src = URL.createObjectURL(blob);
      }
    })
  });

const createVideoWrapperView = _ => {
  /**
   * Write handler for when preview container has been created
   */
  const didCreatePreviewContainer = ({ root, props }) => {
    const { id } = props;
    const item = root.query('GET_ITEM', id);
    if (!item) return;

    // the preview is now ready to be drawn
    root.dispatch('DID_VIDEO_PREVIEW_LOAD', {
      id
    });
  };

  /**
   * Constructor
   */
  const create = ({ root, props }) => {
    const video = createVideoView(_);

    // append video presenter
    root.ref.video = root.appendChildView(
      root.createChildView(video, {
        id: props.id
      })
    );
  };

  return _.utils.createView({
    name: 'video-preview-wrapper',
    create,
    write: _.utils.createRoute({
      // video preview stated
      DID_VIDEO_PREVIEW_CONTAINER_CREATE: didCreatePreviewContainer
    })
  });
};

const isPreviewableVideo = file => /^video/.test(file.type);

/**
 * Video Preview Plugin
 */
const plugin = fpAPI => {
  const { addFilter, utils } = fpAPI;
  const { Type, createRoute } = utils;
  const videoWrapperView = createVideoWrapperView(fpAPI);

  // called for each view that is created right after the 'create' method
  addFilter('CREATE_VIEW', viewAPI => {
    // get reference to created view
    const { is, view, query } = viewAPI;

    // only hook up to item view
    if (!is('file')) {
      return;
    }

    // create the video preview plugin, but only do so if the item is an video
    const didLoadItem = ({ root, props }) => {
      const { id } = props;
      const item = query('GET_ITEM', id);

      if (!item || item.archived || !isPreviewableVideo(item.file)) {
        return;
      }

      // set preview view
      root.ref.videoPreview = view.appendChildView(
        view.createChildView(videoWrapperView, { id })
      );

      // now ready
      root.dispatch('DID_VIDEO_PREVIEW_CONTAINER_CREATE', { id });
    };

    // start writing
    view.registerWriter(
      createRoute(
        {
          DID_LOAD_ITEM: didLoadItem
        },
        ({ root, props }) => {
          const { id } = props;
          const item = query('GET_ITEM', id);

          // don't do anything while not a video or hidden
          if (!isPreviewableVideo(item.file) || root.rect.element.hidden)
            return;

          // should we redraw
          if (root.ref.shouldUpdatePanelHeight != false) {
            // time to resize the parent panel
            root.dispatch('DID_UPDATE_PANEL_HEIGHT', {
              id: props.id,
              height: 200
            });
            root.ref.shouldUpdatePanelHeight = false;
          }
        }
      )
    );
  });

  // expose plugin
  return {
    options: {
      // Enable or disable video preview
      allowVideoPreview: [true, Type.BOOLEAN]
    }
  };
};

// fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags
const isBrowser =
  typeof window !== 'undefined' && typeof window.document !== 'undefined';
if (isBrowser) {
  document.dispatchEvent(
    new CustomEvent('FilePond:pluginloaded', { detail: plugin })
  );
}

export default plugin;
